generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // Use a separate shadow database to avoid P3006 errors when Prisma replays migrations for diffing
  // Create a separate empty database and set SHADOW_DATABASE_URL in .env
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  firstName           String
  lastName            String
  email               String               @unique
  password            String
  provider            String?
  providerId          String?
  isAdmin             Boolean              @default(false)
  address             String?
  phone               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  image               String?              @db.Text
  favorites           Favorite[]
  images              Image[]
  orders              Order[]
  reviews             Review[]
  passwordResetTokens PasswordResetToken[]

  @@unique([provider, providerId])
  @@map("users")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique // Hashed token
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("password_reset_tokens")
}

model Product {
  id          String  @id @default(uuid())
  name        String
  description String  @db.Text
  price       Decimal @db.Decimal(10, 2)

  rating     Float       @default(0)
  stock      Int         @default(0)
  image      String?
  tags       String[]    @default([])
  isActive   Boolean      @default(true)

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  favorites  Favorite[]
  images     Image[]
  orderItems OrderItem[]
  reviews    Review[]
  categories Category[]

  @@map("products")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images  Image[]
  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([userId, productId])
}

model Order {
  id         String      @id @default(uuid())
  total      Decimal     @db.Decimal(12, 2)
  status      OrderStatus   @default(PENDING)
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payment    Payment?
  @@index([userId])
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Decimal @db.Decimal(12, 2)
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("favorites") // why this? - to explicitly set the table name in the database
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String?
  userId    String?
  reviewId  String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  review    Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
  @@index([reviewId])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Payment {
  id          String      @id @default(uuid())
  orderId     String      @unique
  amount      Decimal     @db.Decimal(10, 2)
  status      PaymentStatus @default(PENDING)
  provider    String?
  transactionId String?
  createdAt   DateTime    @default(now())

  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}